import kerastuner as kt
import tensorflow as tf
import yaml


def build_tuner_model(hp):
    '''
    Functions that builds a convolutional keras model with
    tunable hyperparameters


    Parameters
    ----------
    hp: keras tuner class
        A class that is used to define the parameter search space

    Returns
    -------
    model: Keras sequential model
           The trained convolutional neural network
    '''
    ###################################
    # loading the configuration file for tuner

    with open(r'./tuner_config.yaml') as file:
        param = yaml.load(file, Loader=yaml.FullLoader)

    ####################################
    # Defining input size

    inputs = tf.keras.Input(shape=(50, 50, 3))
    x = inputs

    ####################################
    # extracting parameters from the parameters file
    # and feeding in the tuner

    for i in range(hp.Int('conv_layers', 1, max(param['layers']),
                          default=3)):
        x = tf.keras.layers.Conv2D(
            filters=getattr(hp, param['filters'][0])
            ('filters_', min(param['filters'][1]['values']),
             max(param['filters'][1]['values']), step=4, default=8),
            kernel_size=getattr(hp, param['kernel_size'][0])
            ('kernel_size_' + str(i), min(param['kernel_size'][1]['values']),
             max(param['kernel_size'][1]['values'])),
            activation=getattr(hp, param['activation'][0])
            ('activation_' + str(i), values=param['activation'][1]['values']),
            padding='same')(x)

    if getattr(hp,
               param['pooling'][0])('pooling',
                                    values=param['pooling'][1]['values'])\
            == 'max':
        x = tf.keras.layers.GlobalMaxPooling2D()(x)
    else:
        x = tf.keras.layers.GlobalAveragePooling2D()(x)
    outputs = tf.keras.layers.Dense(2, activation='softmax')(x)

    model = tf.keras.Model(inputs, outputs)

    # adding in the optimizer
    optimizer = getattr(hp, param['optimizer'][0])('optimizer',
                                                   values=param['optimizer']
                                                   [1]['values'])

    # compiling neural network model
    model.compile(optimizer, loss='categorical_crossentropy',
                  metrics=['accuracy'])

    return model


def best_model(tuner, training_set, validation_set, test_set, epochs=3):
    '''
    Function that takes the tuner and builds up the model on the basis on best
    hyperparameters in the tuner

    Parameters:
    -----------

    tuner: keras tuner
           tuner generated by specifications from tuner_build_model function
    training_set: keras pointer
                  training set data generated through flow from directory
    validation_set: keras pointer
                    validation set data generated through flow from directory
    test_set: keras point
              test_set data generated through flow from directory. Used for
              cross validation of model
    epochs: int
            the number of times model is executed to be trained over
            training set & validation set

    Returns:
    --------

    model: keras model
           model built up using the best hyperparameters in the tuner
    history: dict
             dictionary containing result from fitting model oveer training
             and validation set
    metrics: np.float64
             np array containing loss and accuracy for cross-validation of data

    '''

    best_hp = tuner.get_best_hyperparameters()[0]

    # best_hp_values = best_hp.values

    model = tuner.hypermodel.build(best_hp)

    history = model.fit(training_set, epochs=epochs,
                        validation_data=validation_set, verbose=0)

    metrics = model.evaluate(test_set, verbose=0)

    return model, history, metrics


def run_tuner(training_set, validation_set, project_name='untransformed',
              epochs=1, trials=5, executions=3,
              search_function='RandomSearch'):
    '''
    Function that runs the tuner using training set, validation set and
    hyperparameters defined in the config file

    Parameters:
    -----------
    training_set: keras pointer
                  training set data generated through keras flow from
                  directory function
    validation_set: keras pointer
                    validation set data generated through keras flow from
                    directory function
    epochs: int
            number of times the model is trained over the training and
            validation set
    trials: int
            number of times the tuner runs search over particular
            hyperparameters
    executions: int
                number of times a trial is executed over particular
                hyperparameters
    search_function: str
                     representing the type of search over the set of
                     hyperparameters

    Returns:
    --------
    tuner: keras tuner
    '''

    ept = executions  # dummy variable representing execution per trial
    # to satisfy flake8 requirement
    early_stopping = tf.keras.callbacks.EarlyStopping(monitor='loss',
                                                      patience=2)

    tuner = getattr(kt.tuners, search_function)(build_tuner_model,
                                                objective='val_accuracy',
                                                max_trials=trials,
                                                executions_per_trial=ept,
                                                project_name=project_name)

    tuner.search(training_set, epochs=epochs, validation_data=validation_set,
                 verbose=2, callbacks=[early_stopping])

    return tuner
